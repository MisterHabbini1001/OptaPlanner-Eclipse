package org.optaplanner.examples.conferencescheduling.domain;
import static org.junit.Assert.*;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Set;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class TimeslotTest 
{
    private LocalDateTime startDateTime;
    private LocalDateTime endDateTime;
    private Set<TalkType> talkTypeSet;
    private Set<String> tagSet;

    // Cached
    private Integer durationInMinutes;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		
	}

	@Before
	public void setUp() throws Exception 
	{
		
	}

	@After
	public void tearDown() throws Exception 
	{
		
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	@Test
    public LocalDate getDate() 
	{
        return startDateTime.toLocalDate();
    }

	@Test
    public Integer getDurationInMinutes() 
    {
        return durationInMinutes;
    }

	@Test
    public boolean overlapsTime(Timeslot other) 
    {
        if (this == other) 
        {
            return true;
        }
        
        return startDateTime.compareTo(other.endDateTime) < 0
                && other.startDateTime.compareTo(endDateTime) < 0;
    }

	@Test
    public int getOverlapInMinutes(Timeslot other) 
    {
        if (this == other) 
        {
            return durationInMinutes;
        }
        
        LocalDateTime startMaximum = (startDateTime.compareTo(other.startDateTime) < 0) ? other.startDateTime : startDateTime;
        LocalDateTime endMinimum = (endDateTime.compareTo(other.endDateTime) < 0) ? endDateTime : other.endDateTime;
        return (int) Duration.between(startMaximum, endMinimum).toMinutes();
    }

	@Test
    public boolean startsAfter(Timeslot other) 
    {
        return other.endDateTime.compareTo(startDateTime) <= 0;
    }

	@Test
    public boolean endsBefore(Timeslot other) 
    {
        return endDateTime.compareTo(other.startDateTime) <= 0;
    }

	@Test
    public boolean hasTag(String tag) 
    {
        return tagSet.contains(tag);
    }

	@Test
    public boolean isOnSameDayAs(Timeslot other) 
    {
        return startDateTime.toLocalDate().equals(other.getStartDateTime().toLocalDate());
    }

	@Test
    public boolean pauseExists(Timeslot other, int pauseInMinutes) 
    {
        if (this.overlapsTime(other)) 
        {
            return false;
        }
        
        if (!this.isOnSameDayAs(other)) 
        {
            return true;
        }
        
        if (this.startsAfter(other)) 
        {
            // TODO use Duration.between(a, b).toMinutes()
            return (this.getStartDateTime().getHour() * 60 + this.getStartDateTime().getMinute())
                    - (other.getEndDateTime().getHour() * 60 + other.getEndDateTime().getMinute()) >= pauseInMinutes;
        } 
        
        else 
        {
            // TODO use Duration.between(a, b).toMinutes()
            return (other.getStartDateTime().getHour() * 60 + other.getStartDateTime().getMinute())
                    - (this.getEndDateTime().getHour() * 60 + this.getEndDateTime().getMinute()) >= pauseInMinutes;
        }
    }

    @Override
    @Test
    public String toString() 
    {
        return startDateTime + "-" + endDateTime.toLocalTime();
    }

    // ************************************************************************
    // Simple getters and setters
    // ************************************************************************

    @Test
    public LocalDateTime getStartDateTime() 
    {
        return startDateTime;
    }

    @Test
    public void setStartDateTime(LocalDateTime startDateTime) 
    {
        this.startDateTime = startDateTime;
        durationInMinutes = (startDateTime == null || endDateTime == null) ? null
                : (int) Duration.between(startDateTime, endDateTime).toMinutes();
    }

    @Test
    public LocalDateTime getEndDateTime() 
    {
        return endDateTime;
    }

    @Test
    public void setEndDateTime(LocalDateTime endDateTime) 
    {
        this.endDateTime = endDateTime;
        durationInMinutes = (startDateTime == null || endDateTime == null) ? null
                : (int) Duration.between(startDateTime, endDateTime).toMinutes();
    }

    @Test
    public Set<TalkType> getTalkTypeSet() 
    {
        return talkTypeSet;
    }

    @Test
    public void setTalkTypeSet(Set<TalkType> talkTypeSet) 
    {
        this.talkTypeSet = talkTypeSet;
    }

    @Test
    public Set<String> getTagSet() 
    {
        return tagSet;
    }

    @Test
    public void setTagSet(Set<String> tagSet) 
    {
        this.tagSet = tagSet;
    }

    // ************************************************************************
    // With methods
    // ************************************************************************

    @Test
    public Timeslot withTalkTypeSet(Set<TalkType> talkTypeSet) 
    {
        this.talkTypeSet = talkTypeSet;
        return this;
    }

    @Test
    public Timeslot withStartDateTime(LocalDateTime startDateTime) 
    {
        this.startDateTime = startDateTime;
        durationInMinutes = (startDateTime == null || endDateTime == null) ? null
                : (int) Duration.between(startDateTime, endDateTime).toMinutes();
        return this;
    }

    @Test
    public Timeslot withEndDateTime(LocalDateTime endDateTime) 
    {
        this.endDateTime = endDateTime;
        durationInMinutes = (startDateTime == null || endDateTime == null) ? null
                : (int) Duration.between(startDateTime, endDateTime).toMinutes();
        return this;
    }
}
