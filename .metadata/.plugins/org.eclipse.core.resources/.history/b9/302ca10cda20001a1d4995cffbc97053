package org.optaplanner.examples.curriculumcourse.domain;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.drools.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.examples.curriculumcourse.domain.solver.CourseConflict;
import org.optaplanner.persistence.xstream.api.score.buildin.hardsoft.HardSoftScoreXStreamConverter;

import com.thoughtworks.xstream.annotations.XStreamConverter;

public class CourseScheduleTest 
{
    private String name;
    private List<Teacher> teacherList;
    private List<Curriculum> curriculumList;
    private List<Course> courseList;
    private List<Day> dayList;
    private List<Timeslot> timeslotList;
    private List<Period> periodList;
    private List<Room> roomList;
    private List<UnavailablePeriodPenalty> unavailablePeriodPenaltyList;
    private List<Lecture> lectureList;

    @XStreamConverter(HardSoftScoreXStreamConverter.class)
    private HardSoftScore score;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		CourseSchedule cs = new CourseSchedule();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		CourseSchedule cs = new CourseSchedule();
		cs = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		CourseSchedule cs = new CourseSchedule();
	}

	@After
	public void tearDown() throws Exception 
	{
		CourseSchedule cs = new CourseSchedule();
		cs = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/
	
	@Test
	public String testgetName() 
	{
        return name;
    }

	@Test
    public void testsetName(String name) 
	{
        this.name = name;
    }

	@Test
    @ProblemFactCollectionProperty
    public List<Teacher> testgetTeacherList() 
	{
        return teacherList;
    }

	@Test
    public void testsetTeacherList(List<Teacher> teacherList) 
	{
        this.teacherList = teacherList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<Curriculum> testgetCurriculumList() 
    {
        return curriculumList;
    }

    @Test
    public void testsetCurriculumList(List<Curriculum> curriculumList) 
    {
        this.curriculumList = curriculumList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<Course> testgetCourseList() 
    {
        return courseList;
    }

    @Test
    public void testsetCourseList(List<Course> courseList) 
    {
        this.courseList = courseList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<Day> testgetDayList() 
    {
        return dayList;
    }

    @Test
    public void testsetDayList(List<Day> dayList) 
    {
        this.dayList = dayList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<Timeslot> testgetTimeslotList() 
    {
        return timeslotList;
    }

    @Test
    public void testsetTimeslotList(List<Timeslot> timeslotList) 
    {
        this.timeslotList = timeslotList;
    }

    @ValueRangeProvider(id = "periodRange")
    @ProblemFactCollectionProperty
    @Test
    public List<Period> testgetPeriodList() 
    {
        return periodList;
    }

    @Test
    public void testsetPeriodList(List<Period> periodList) 
    {
        this.periodList = periodList;
    }

    @ValueRangeProvider(id = "roomRange")
    @ProblemFactCollectionProperty
    @Test
    public List<Room> testgetRoomList() 
    {
        return roomList;
    }

    @Test
    public void testsetRoomList(List<Room> roomList) 
    {
        this.roomList = roomList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<UnavailablePeriodPenalty> testgetUnavailablePeriodPenaltyList() 
    {
        return unavailablePeriodPenaltyList;
    }

    @Test
    public void testsetUnavailablePeriodPenaltyList(List<UnavailablePeriodPenalty> unavailablePeriodPenaltyList) 
    {
        this.unavailablePeriodPenaltyList = unavailablePeriodPenaltyList;
    }

    @PlanningEntityCollectionProperty
    @Test
    public List<Lecture> testgetLectureList() 
    {
        return lectureList;
    }

    @Test
    public void testsetLectureList(List<Lecture> lectureList) 
    {
        this.lectureList = lectureList;
    }

    @PlanningScore
    @Test
    public HardSoftScore testgetScore() 
    {
        return score;
    }

    @Test
    public void testsetScore(HardSoftScore score) 
    {
        this.score = score;
    }

    // ************************************************************************
    // Complex methods
    // ************************************************************************

    @ProblemFactCollectionProperty
    @Test
    private List<CourseConflict> testcalculateCourseConflictList() 
    {
        List<CourseConflict> courseConflictList = new ArrayList<>();
        for (Course leftCourse : courseList) 
        {
            for (Course rightCourse : courseList) 
            {
                if (leftCourse.getId() < rightCourse.getId()) 
                {
                    int conflictCount = 0;
                    if (leftCourse.getTeacher().equals(rightCourse.getTeacher())) 
                    {
                        conflictCount++;
                    }
                    
                    for (Curriculum curriculum : leftCourse.getCurriculumList()) 
                    {
                        if (rightCourse.getCurriculumList().contains(curriculum)) 
                        {
                            conflictCount++;
                        }
                    }
                    
                    if (conflictCount > 0) 
                    {
                        courseConflictList.add(new CourseConflict(leftCourse, rightCourse, conflictCount));
                    }
                }
            }
        }
        
        return courseConflictList;
    }
}
