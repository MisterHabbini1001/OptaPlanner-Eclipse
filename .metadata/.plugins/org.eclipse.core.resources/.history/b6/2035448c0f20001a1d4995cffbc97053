package org.optaplanner.examples.conferencescheduling.domain;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Set;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.entity.PlanningPin;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

public class TalkTest 
{
    private String code;
    private String title;
    private TalkType talkType;
    private List<Speaker> speakerList;
    private Set<String> themeTrackTagSet;
    private Set<String> sectorTagSet;
    private Set<String> audienceTypeSet;
    private int audienceLevel;
    private Set<String> contentTagSet;
    private String language;
    private Set<String> requiredTimeslotTagSet;
    private Set<String> preferredTimeslotTagSet;
    private Set<String> prohibitedTimeslotTagSet;
    private Set<String> undesiredTimeslotTagSet;
    private Set<String> requiredRoomTagSet;
    private Set<String> preferredRoomTagSet;
    private Set<String> prohibitedRoomTagSet;
    private Set<String> undesiredRoomTagSet;
    private Set<String> mutuallyExclusiveTalksTagSet;
    private Set<Talk> prerequisiteTalkSet;
    private int favoriteCount;
    private int crowdControlRisk;
    private Timeslot publishedTimeslot;
    private Room publishedRoom;

    @PlanningPin
    private boolean pinnedByUser = false;

    @PlanningVariable(valueRangeProviderRefs = "timeslotRange")
    private Timeslot timeslot;

    @PlanningVariable(valueRangeProviderRefs = "roomRange")
    private Room room;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		Talk ta = new Talk();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		Talk ta = new Talk();
		ta = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		Talk ta = new Talk();
	}

	@After
	public void tearDown() throws Exception 
	{
		Talk ta = new Talk();
		ta = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/
	
	@Test
   public void testhasSpeaker() 
   {
		Speaker speaker = new Speaker();
		System.out.println(speakerList.contains(speaker));
   }

	@Test
   public void testhasAnyUnavailableSpeaker() 
	{
        if (timeslot == null) 
        {
            System.out.println(false);
        }
                
        System.out.println(false);
    }

	@Test
    public int testoverlappingThemeTrackCount(Talk other) 
	{
        return (int) themeTrackTagSet.stream().count();
        System.out.println()
    }

	@Test
    public int testoverlappingSectorCount(Talk other) 
	{
        return (int) sectorTagSet.stream().count();
    }

	@Test
    public int testoverlappingAudienceTypeCount(Talk other) 
	{
        return (int) audienceTypeSet.stream().count();
    }

	@Test
    public int testoverlappingContentCount(Talk other) 
	{
        return (int) contentTagSet.stream().count();
    }

	@Test
    public int testmissingRequiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) requiredTimeslotTagSet.stream().filter(tag -> !timeslot.hasTag(tag)).count();
    }

	@Test
    public int testmissingPreferredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) preferredTimeslotTagSet.stream().filter(tag -> !timeslot.hasTag(tag)).count();
    }

	@Test
    public int testprevailingProhibitedTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) prohibitedTimeslotTagSet.stream().filter(tag -> timeslot.hasTag(tag)).count();
    }

	@Test
    public int testprevailingUndesiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) undesiredTimeslotTagSet.stream().filter(tag -> timeslot.hasTag(tag)).count();
    }

	@Test
    public int testmissingRequiredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) requiredRoomTagSet.stream().filter(tag -> !room.hasTag(tag)).count();
    }

	@Test
    public int testmissingPreferredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) preferredRoomTagSet.stream().filter(tag -> !room.hasTag(tag)).count();
    }

	@Test
    public int testprevailingProhibitedRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) prohibitedRoomTagSet.stream().filter(tag -> room.hasTag(tag)).count();
    }

	@Test
    public int testprevailingUndesiredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) undesiredRoomTagSet.stream().filter(tag -> room.hasTag(tag)).count();
    }

	@Test
    public int testmissingSpeakerRequiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getRequiredTimeslotTagSet().stream())
                .filter(tag -> !timeslot.hasTag(tag)).count();
    }

	@Test
    public int testmissingSpeakerPreferredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getPreferredTimeslotTagSet().stream())
                .filter(tag -> !timeslot.hasTag(tag)).count();
    }

	@Test
    public int testprevailingSpeakerProhibitedTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getProhibitedTimeslotTagSet().stream())
                .filter(tag -> timeslot.hasTag(tag)).count();
    }

	@Test
    public int testprevailingSpeakerUndesiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getUndesiredTimeslotTagSet().stream())
                .filter(tag -> timeslot.hasTag(tag)).count();
    }

	@Test
    public int testmissingSpeakerRequiredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getRequiredRoomTagSet().stream())
                .filter(tag -> !room.hasTag(tag)).count();
    }

	@Test
    public int testmissingSpeakerPreferredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getPreferredRoomTagSet().stream())
                .filter(tag -> !room.hasTag(tag)).count();
    }

	@Test
    public int testprevailingSpeakerProhibitedRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getProhibitedRoomTagSet().stream())
                .filter(tag -> room.hasTag(tag)).count();
    }

	@Test
    public int testprevailingSpeakerUndesiredRoomTagCount() 
	{
        if (room == null) 
        {
            return 0;
        }
        
        return (int) speakerList.stream().flatMap(speaker -> speaker.getUndesiredRoomTagSet().stream())
                .filter(tag -> room.hasTag(tag)).count();
    }

	@Test
    public boolean testhasUnavailableRoom() 
	{
        if (timeslot == null || room == null) 
        {
            return false;
        }
        
        return room.getUnavailableTimeslotSet().contains(timeslot);
    }

	@Test
    public int testoverlappingMutuallyExclusiveTalksTagCount(Talk other) 
	{
        return (int) mutuallyExclusiveTalksTagSet.stream().filter(tag -> other.mutuallyExclusiveTalksTagSet.contains(tag)).count();
    }

	@Test
    public int testmissingPrerequisiteCount() 
	{
        return (int) prerequisiteTalkSet.stream()
                .filter(prerequisite -> prerequisite.getTimeslot() == null || timeslot.endsBefore(prerequisite.getTimeslot()))
                .count();
    }

	@Test
    public boolean testhasMutualSpeaker(Talk talk) 
	{
        for (Speaker speaker : talk.getSpeakerList()) 
        {
            if (speakerList.contains(speaker)) 
            {
                return true;
            }
        }
        
        return false;
    }

	@Test
    public Integer testgetDurationInMinutes() 
	{
        return timeslot == null ? null : timeslot.getDurationInMinutes();
    }

	@Test
    public boolean testoverlapsTime(Talk other) 
	{
        return timeslot != null && other.getTimeslot() != null && timeslot.overlapsTime(other.getTimeslot());
    }

	@Test
    public int testoverlappingDurationInMinutes(Talk other) 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        if (other.getTimeslot() == null) 
        {
            return 0;
        }
        
        return timeslot.getOverlapInMinutes(other.getTimeslot());
    }

	@Test
    public int testcombinedDurationInMinutes(Talk other) 
	{
        if (timeslot == null) 
        {
            return 0;
        }
        
        if (other.getTimeslot() == null) 
        {
            return 0;
        }
        
        return timeslot.getDurationInMinutes() + other.getTimeslot().getDurationInMinutes();
    }

    @Override
    @Test
    public String testtoString() 
    {
        return code;
    }

    @ValueRangeProvider(id = "timeslotRange")
    @Test
    public Set<Timeslot> testgetTimeslotRange() 
    {
        return talkType.getCompatibleTimeslotSet();
    }

    @ValueRangeProvider(id = "roomRange")
    @Test
    public Set<Room> testgetRoomRange() 
    {
        return talkType.getCompatibleRoomSet();
    }

    @Test
    public String testgetCode() 
    {
        return code;
    }

    @Test
    public void testsetCode(String code) 
    {
        this.code = code;
    }

    @Test
    public String testgetTitle() 
    {
        return title;
    }

    @Test
    public void testsetTitle(String title) 
    {
        this.title = title;
    }

    @Test
    public TalkType testgetTalkType() 
    {
        return talkType;
    }

    @Test
    public void testsetTalkType(TalkType talkType) 
    {
        this.talkType = talkType;
    }

    @Test
    public void testsetLanguage(String language) 
    {
        this.language = language;
    }

    @Test
    public List<Speaker> testgetSpeakerList() 
    {
        return speakerList;
    }

    @Test
    public Set<String> testgetThemeTrackTagSet() 
    {
        return themeTrackTagSet;
    }

    @Test
    public void testsetThemeTrackTagSet(Set<String> themeTrackTagSet) 
    {
        this.themeTrackTagSet = themeTrackTagSet;
    }

    @Test
    public Set<String> testgetSectorTagSet() 
    {
        return sectorTagSet;
    }

    @Test
    public void testsetSectorTagSet(Set<String> sectorTagSet) 
    {
        this.sectorTagSet = sectorTagSet;
    }

    @Test
    public Set<String> testgetAudienceTypeSet() 
    {
        return audienceTypeSet;
    }

    @Test
    public void testsetAudienceTypeSet(Set<String> audienceTypeSet) 
    {
        this.audienceTypeSet = audienceTypeSet;
    }

    @Test
    public int testgetAudienceLevel() 
    {
        return audienceLevel;
    }

    @Test
    public void testsetAudienceLevel(int audienceLevel) 
    {
        this.audienceLevel = audienceLevel;
    }

    @Test
    public Set<String> testgetContentTagSet() 
    {
        return contentTagSet;
    }

    @Test
    public void testsetContentTagSet(Set<String> contentTagSet) 
    {
        this.contentTagSet = contentTagSet;
    }

    @Test
    public String testgetLanguage() 
    {
        return language;
    }

    @Test
    public void testsetSpeakerList(List<Speaker> speakerList) 
    {
        this.speakerList = speakerList;
    }

    @Test
    public Set<String> testgetRequiredTimeslotTagSet() 
    {
        return requiredTimeslotTagSet;
    }

    @Test
    public void testsetRequiredTimeslotTagSet(Set<String> requiredTimeslotTagSet) 
    {
        this.requiredTimeslotTagSet = requiredTimeslotTagSet;
    }

    @Test
    public Set<String> testgetPreferredTimeslotTagSet() 
    {
        return preferredTimeslotTagSet;
    }

    @Test
    public void testsetPreferredTimeslotTagSet(Set<String> preferredTimeslotTagSet) 
    {
        this.preferredTimeslotTagSet = preferredTimeslotTagSet;
    }

    @Test
    public Set<String> testgetProhibitedTimeslotTagSet() 
    {
        return prohibitedTimeslotTagSet;
    }

    @Test
    public void testsetProhibitedTimeslotTagSet(Set<String> prohibitedTimeslotTagSet) 
    {
        this.prohibitedTimeslotTagSet = prohibitedTimeslotTagSet;
    }

    @Test
    public Set<String> testgetUndesiredTimeslotTagSet() 
    {
        return undesiredTimeslotTagSet;
    }

    @Test
    public void testsetUndesiredTimeslotTagSet(Set<String> undesiredTimeslotTagSet) 
    {
        this.undesiredTimeslotTagSet = undesiredTimeslotTagSet;
    }

    @Test
    public Set<String> testgetRequiredRoomTagSet() 
    {
        return requiredRoomTagSet;
    }

    @Test
    public void testsetRequiredRoomTagSet(Set<String> requiredRoomTagSet) 
    {
        this.requiredRoomTagSet = requiredRoomTagSet;
    }

    @Test
    public Set<String> testgetPreferredRoomTagSet() 
    {
        return preferredRoomTagSet;
    }

    @Test
    public void testsetPreferredRoomTagSet(Set<String> preferredRoomTagSet) 
    {
        this.preferredRoomTagSet = preferredRoomTagSet;
    }

    @Test
    public Set<String> testgetProhibitedRoomTagSet() 
    {
        return prohibitedRoomTagSet;
    }

    @Test
    public void testsetProhibitedRoomTagSet(Set<String> prohibitedRoomTagSet) 
    {
        this.prohibitedRoomTagSet = prohibitedRoomTagSet;
    }

    @Test
    public Set<String> testgetUndesiredRoomTagSet() 
    {
        return undesiredRoomTagSet;
    }

    @Test
    public void testsetUndesiredRoomTagSet(Set<String> undesiredRoomTagSet) 
    {
        this.undesiredRoomTagSet = undesiredRoomTagSet;
    }

    @Test
    public boolean testisPinnedByUser() 
    {
        return pinnedByUser;
    }

    @Test
    public void testsetPinnedByUser(boolean pinnedByUser) 
    {
        this.pinnedByUser = pinnedByUser;
    }

    @Test
    public Timeslot testgetTimeslot() 
    {
        return timeslot;
    }

    @Test
    public void testsetTimeslot(Timeslot timeslot) 
    {
        this.timeslot = timeslot;
    }

    @Test
    public Room testgetRoom() 
    {
        return room;
    }

    @Test
    public void testsetRoom(Room room) 
    {
        this.room = room;
    }

    @Test
    public Set<String> testgetMutuallyExclusiveTalksTagSet() 
    {
        return mutuallyExclusiveTalksTagSet;
    }

    @Test
    public void testsetMutuallyExclusiveTalksTagSet(Set<String> mutuallyExclusiveTalksTagSet) 
    {
        this.mutuallyExclusiveTalksTagSet = mutuallyExclusiveTalksTagSet;
    }

    @Test
    public Set<Talk> testgetPrerequisiteTalkSet() 
    {
        return prerequisiteTalkSet;
    }

    @Test
    public void testsetPrerequisiteTalkSet(Set<Talk> prerequisiteTalkSet) 
    {
        this.prerequisiteTalkSet = prerequisiteTalkSet;
    }

    @Test
    public int testgetFavoriteCount() 
    {
        return favoriteCount;
    }

    @Test
    public void testsetFavoriteCount(int favoriteCount) 
    {
        this.favoriteCount = favoriteCount;
    }

    @Test
    public int testgetCrowdControlRisk() 
    {
        return crowdControlRisk;
    }

    @Test
    public void testsetCrowdControlRisk(int crowdControlRisk) 
    {
        this.crowdControlRisk = crowdControlRisk;
    }

    @Test
    public Timeslot testgetPublishedTimeslot() 
    {
        return publishedTimeslot;
    }

    @Test
    public void testsetPublishedTimeslot(Timeslot publishedTimeslot) 
    {
        this.publishedTimeslot = publishedTimeslot;
    }

    @Test
    public Room testgetPublishedRoom() 
    {
        return publishedRoom;
    }

    @Test
    public void testsetPublishedRoom(Room publishedRoom) 
    {
        this.publishedRoom = publishedRoom;
    }

    @Test
    public Talk testwithTalkType(TalkType talkType) 
    {
        this.talkType = talkType;
        return this;
    }

    @Test
    public Talk testwithSpeakerList(List<Speaker> speakerList) 
    {
        this.speakerList = speakerList;
        return this;
    }

    @Test
    public Talk testwithThemeTrackTagSet(Set<String> themeTrackTagSet) 
    {
        this.themeTrackTagSet = themeTrackTagSet;
        return this;
    }

    @Test
    public Talk testwithSectorTagSet(Set<String> sectorTagSet) 
    {
        this.sectorTagSet = sectorTagSet;
        return this;
    }

    @Test
    public Talk testwithAudienceTypeSet(Set<String> audienceTypeSet) 
    {
        this.audienceTypeSet = audienceTypeSet;
        return this;
    }

    @Test
    public Talk testwithAudienceLevel(int audienceLevel) 
    {
        this.audienceLevel = audienceLevel;
        return this;
    }

    @Test
    public Talk testwithContentTagSet(Set<String> contentTagSet) 
    {
        this.contentTagSet = contentTagSet;
        return this;
    }

    @Test
    public Talk testwithLanguage(String language) 
    {
        this.language = language;
        return this;
    }

    @Test
    public Talk testwithRequiredRoomTagSet(Set<String> requiredRoomTagSet) 
    {
        this.requiredRoomTagSet = requiredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithPreferredRoomTagSet(Set<String> preferredRoomTagSet) 
    {
        this.preferredRoomTagSet = preferredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithProhibitedRoomTagSet(Set<String> prohibitedRoomTagSet) 
    {
        this.prohibitedRoomTagSet = prohibitedRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithUndesiredRoomTagSet(Set<String> undesiredRoomTagSet) 
    {
        this.undesiredRoomTagSet = undesiredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithRequiredTimeslotTagSet(Set<String> requiredTimeslotTagSet) 
    {
        this.requiredTimeslotTagSet = requiredTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithProhibitedTimeslotTagSet(Set<String> prohibitedTimeslotTagSet) 
    {
        this.prohibitedTimeslotTagSet = prohibitedTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithPreferredTimeslotTagSet(Set<String> preferredTimslotTagSet) 
    {
        this.preferredTimeslotTagSet = preferredTimslotTagSet;
        return this;
    }

    @Test
    public Talk testwithUndesiredTimeslotTagSet(Set<String> undesiredTimeslotTagSet) 
    {
        this.undesiredTimeslotTagSet = undesiredTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithMutuallyExclusiveTalksTagSet(Set<String> mutuallyExclusiveTalksTagSet) 
    {
        this.mutuallyExclusiveTalksTagSet = mutuallyExclusiveTalksTagSet;
        return this;
    }

    @Test
    public Talk testwithPrerequisiteTalksCodesSet(Set<Talk> prerequisiteTalksCodesSet) 
    {
        this.prerequisiteTalkSet = prerequisiteTalksCodesSet;
        return this;
    }

    @Test
    public Talk testwithTimeslot(Timeslot timeSlot) 
    {
        this.timeslot = timeSlot;
        return this;
    }

    @Test
    public Talk testwithRoom(Room room) 
    {
        this.room = room;
        return this;
    }
}
