package org.optaplanner.examples.pas.domain;
import static org.junit.Assert.*;

import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class RoomTest {
    private String name;
    private Department department;
    private int capacity;
    private GenderLimitation genderLimitation;
    private List<RoomSpecialism> roomSpecialismList;
    private List<RoomEquipment> roomEquipmentList;
    private List<Bed> bedList;
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		Room r = new Room();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		Room r = new Room();
		r = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		Room r = new Room();
	}

	@After
	public void tearDown() throws Exception 
	{
		Room r = new Room();
		r = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	public String getName() {
        System.out.println(name);
    }

    public void setName() {
        this.name = name;
    }

    public void getDepartment() {
    	System.out.println(department);
    }

    public void setDepartment() {
        this.department = department;
    }

    public void getCapacity() {
    	System.out.println(capacity);
    }

    public void setCapacity() {
        this.capacity = capacity;
    }

    public void getGenderLimitation() {
    	System.out.println(genderLimitation);
    }

    public void setGenderLimitation() {
        this.genderLimitation = genderLimitation;
    }

    public void getRoomSpecialismList() {
    	System.out.println(roomSpecialismList);
    }

    public void setRoomSpecialismList() {
        this.roomSpecialismList = roomSpecialismList;
    }

    public void getRoomEquipmentList() {
    	System.out.println(roomEquipmentList);
    }

    public void setRoomEquipmentList() {
        this.roomEquipmentList = roomEquipmentList;
    }

    public void getBedList() {
    	System.out.println(bedList);
    }

    public void setBedList() {
        this.bedList = bedList;
    }

    public void countHardDisallowedAdmissionPart() {
    	System.out.println(0);
    }

    public int countMissingRequiredRoomProperties(Patient patient) {
        int count = 0;
        for (RequiredPatientEquipment requiredPatientEquipment : patient.getRequiredPatientEquipmentList()) {
            Equipment requiredEquipment = requiredPatientEquipment.getEquipment();
            boolean hasRequiredEquipment = false;
            for (RoomEquipment roomEquipment : roomEquipmentList) {
                if (roomEquipment.getEquipment().equals(requiredEquipment)) {
                    hasRequiredEquipment = true;
                }
            }
            if (!hasRequiredEquipment) {
                count += 100000;
            }
        }
        return count;
    }

    public int countDisallowedPatientGender(Patient patient) {
        switch (genderLimitation) {
            case ANY_GENDER:
                return 0;
            case MALE_ONLY:
                return patient.getGender() == Gender.MALE ? 0 : 4;
            case FEMALE_ONLY:
                return patient.getGender() == Gender.FEMALE ? 0 : 4;
            case SAME_GENDER:
                // scoreRules check this
                return 1;
            default:
                throw new IllegalStateException("The genderLimitation (" + genderLimitation + ") is not implemented.");
        }
    }

    public int countSoftDisallowedAdmissionPart(AdmissionPart admissionPart) {
        return countMissingPreferredRoomProperties(admissionPart.getPatient());
        // TODO preferredMaximumRoomCapacity and specialism
    }

    public int countMissingPreferredRoomProperties(Patient patient) {
        int count = 0;
        for (PreferredPatientEquipment preferredPatientEquipment : patient.getPreferredPatientEquipmentList()) {
            Equipment preferredEquipment = preferredPatientEquipment.getEquipment();
            boolean hasPreferredEquipment = false;
            for (RoomEquipment roomEquipment : roomEquipmentList) {
                if (roomEquipment.getEquipment().equals(preferredEquipment)) {
                    hasPreferredEquipment = true;
                }
            }
            if (!hasPreferredEquipment) {
                count += 20;
            }
        }
        return count;
    }

    public String getLabel() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}
