package org.optaplanner.examples.vehiclerouting.domain.location.segmented;
import static org.junit.Assert.*;
import java.util.Map;
import org.junit.*;
import org.optaplanner.examples.vehiclerouting.domain.location.Location;

public class RoadSegmentLocationTest 
{
    protected Map<RoadSegmentLocation, Double> nearbyTravelDistanceMap;
    protected Map<HubSegmentLocation, Double> hubTravelDistanceMap;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		//assertEquals(2, 2); // For now. Remove later
		RoadSegmentLocation rsl = new RoadSegmentLocation();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception
	{
		//assertEquals(2, 2); // For now. Remove later
		RoadSegmentLocation rsl = new RoadSegmentLocation();
		rsl = null;
	}

	@Before
	public void setUp() throws Exception
	{
		//assertEquals(2, 2); // For now. Remove later
		RoadSegmentLocation rsl = new RoadSegmentLocation();
	}

	@After
	public void tearDown() throws Exception 
	{
		//assertEquals(2, 2); // For now. Remove later
		RoadSegmentLocation rsl = new RoadSegmentLocation();
		rsl = null;
	}
	
	@Test
	public void testgetNearbyTravelDistanceMap()
	{
		//assertEquals(2, 2); // For now. Remove later
		//return nearbyTravelDistanceMap;
		System.out.println(nearbyTravelDistanceMap);
	}
	
	@Test
	public void testsetNearbyTravelDistanceMap()
	{
		//assertEquals(2, 2); // For now. Remove later
		this.nearbyTravelDistanceMap = nearbyTravelDistanceMap;
	}
	
	@Test
	public void testgetHubTravelDistanceMap()
	{
		//assertEquals(2, 2); // For now. Remove later
		//return hubTravelDistanceMap;
		System.out.println(hubTravelDistanceMap);
	}
	
	@Test
	public void testsetHubTravelDistanceMap()
	{
		//assertEquals(2, 2); // For now. Remove later
		this.hubTravelDistanceMap = hubTravelDistanceMap;
	}
	
	@Test
	public void testgetDistanceTo(Location location)
	{
		//assertEquals(2, 2); // For now. Remove later
        //Double distance = testgetDistanceDouble((RoadSegmentLocation) location);
		Double distance = 5.41;
        // Multiplied by 1000 to avoid floating point arithmetic rounding errors
        //return (long) (distance * 1000.0 + 0.5);
        System.out.println((long) (distance * 1000.0 + 0.5));
	}
	
	@Test
	public Double testgetDistanceDouble(RoadSegmentLocation location)
	{
		//assertEquals(2, 2); // For now. Remove later
        Double distance = nearbyTravelDistanceMap.get((RoadSegmentLocation) location);
        if (distance == null) 
        {
            // location isn't nearby
            distance = testgetShortestDistanceDoubleThroughHubs((RoadSegmentLocation) location);
        }
        return distance;
	}
	
	@Test
	public double testgetShortestDistanceDoubleThroughHubs(RoadSegmentLocation location)
	{
		//assertEquals(2, 2); // For now. Remove later
        double shortestDistance = Double.MAX_VALUE;
        for (Map.Entry<HubSegmentLocation, Double> entry : hubTravelDistanceMap.entrySet()) {
            double distance = entry.getValue();
            distance += entry.getKey().getDistanceDouble(location);
            if (distance < shortestDistance) 
            {
                shortestDistance = distance;
            }
        }
        return shortestDistance;
	}
}
