package org.optaplanner.examples.examination.domain;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
import org.optaplanner.examples.examination.domain.solver.RoomStrengthWeightFactory;

public class ExamTest 
{
    protected Topic topic;
    protected Room room;
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		
	}

	@Before
	public void setUp() throws Exception 
	{
		
	}

	@After
	public void tearDown() throws Exception 
	{
		
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	@Test
	public Topic testgetTopic() 
	{
        return topic;
    }

	@Test
    public void testsetTopic(Topic topic) 
    {
        this.topic = topic;
    }

    @PlanningVariable(valueRangeProviderRefs = {"roomRange"},
            strengthWeightFactoryClass = RoomStrengthWeightFactory.class)
    @Test
    public Room testgetRoom() 
    {
        return room;
    }

    @Test
    public void testsetRoom(Room room) 
    {
        this.room = room;
    }

    @Test
    public Period testgetPeriod()
    {
    	
    }

    @Test
    public int testgetTopicDuration() 
    {
        return getTopic().getDuration();
    }

    @Test
    public int testgetTopicStudentSize() 
    {
        return getTopic().getStudentSize();
    }

    @Test
    public int testgetDayIndex() 
    {
        Period period = getPeriod();
        if (period == null) 
        {
            return Integer.MIN_VALUE;
        }
        
        return period.getDayIndex();
    }

    @Test
    public int testgetPeriodIndex() 
    {
        Period period = getPeriod();
        if (period == null) 
        {
            return Integer.MIN_VALUE;
        }
        
        return period.getPeriodIndex();
    }

    @Test
    public int testgetPeriodDuration() 
    {
        Period period = getPeriod();
        if (period == null) 
        {
            return Integer.MIN_VALUE;
        }
        
        return period.getDuration();
    }

    @Test
    public boolean testisTopicFrontLoadLarge() 
    {
        return topic.isFrontLoadLarge();
    }

    @Test
    public boolean testisPeriodFrontLoadLast() 
    {
        Period period = getPeriod();
        if (period == null) 
        {
            return false;
        }
        
        return period.isFrontLoadLast();
    }

    @Test
    public String testgetLabel() 
    {
        return Long.toString(topic.getId());
    }

    @Test
    public String testtoString() 
    {
        return topic.toString();
    }
}
