package org.optaplanner.examples.vehiclerouting.domain.location.segmented;
import java.util.Map;
import org.optaplanner.examples.vehiclerouting.domain.location.Location;
import com.thoughtworks.xstream.annotations.XStreamAlias;

@XStreamAlias("VrpRoadSegmentLocation")
public class TK_RoadSegmentLocation 
{
    // Prefer Map over array or List because customers might be added and removed in real-time planning.
    protected Map<RoadSegmentLocation, Double> nearbyTravelDistanceMap;
    protected Map<HubSegmentLocation, Double> hubTravelDistanceMap;
    double latitude;
    double longitude;

    public TK_RoadSegmentLocation() 
    {
    	
    }

    public TK_RoadSegmentLocation(double latitude, double longitude) 
    {
        this.latitude = latitude;
        this.longitude = longitude;
    }

    public Map<RoadSegmentLocation, Double> getNearbyTravelDistanceMap() 
    {
        return nearbyTravelDistanceMap;
    }

    public void setNearbyTravelDistanceMap(Map<RoadSegmentLocation, Double> nearbyTravelDistanceMap) 
    {
        this.nearbyTravelDistanceMap = nearbyTravelDistanceMap;
    }

    public Map<HubSegmentLocation, Double> getHubTravelDistanceMap() 
    {
        return hubTravelDistanceMap;
    }

    public void setHubTravelDistanceMap(Map<HubSegmentLocation, Double> hubTravelDistanceMap) 
    {
        this.hubTravelDistanceMap = hubTravelDistanceMap;
    }

    public long getDistanceTo(Location location) 
    {
        Double distance = getDistanceDouble((RoadSegmentLocation) location);
        // Multiplied by 1000 to avoid floating point arithmetic rounding errors
        return (long) (distance * 1000.0 + 0.5);
    }

    public Double getDistanceDouble(RoadSegmentLocation location) 
    {
        Double distance = nearbyTravelDistanceMap.get((RoadSegmentLocation) location);
        if (distance == null) 
        {
            // location isn't nearby
            distance = getShortestDistanceDoubleThroughHubs((RoadSegmentLocation) location);
        }
        
        return distance;
    }

    protected double getShortestDistanceDoubleThroughHubs(RoadSegmentLocation location) 
    {
        double shortestDistance = Double.MAX_VALUE;
        for (Map.Entry<HubSegmentLocation, Double> entry : hubTravelDistanceMap.entrySet()) 
        {
            double distance = entry.getValue();
            distance += entry.getKey().getDistanceDouble(location);
            if (distance < shortestDistance) 
            {
                shortestDistance = distance;
            }
        }
        
        return shortestDistance;
    }
}
