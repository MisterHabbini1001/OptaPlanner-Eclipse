package org.optaplanner.examples.meetingscheduling.domain;
import static org.junit.Assert.*;
import org.apache.commons.lang3.text.WordUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

public class MeetingAssignmentTest 
{
    private Meeting meeting;
    private TimeGrain startingTimeGrain;
    private Room room;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		MeetingAssignment ma = new MeetingAssignment();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		MeetingAssignment ma = new MeetingAssignment();
		ma = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		MeetingAssignment ma = new MeetingAssignment();
	}

	@After
	public void tearDown() throws Exception 
	{
		MeetingAssignment ma = new MeetingAssignment();
		ma = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	@Test
	public void testgetMeeting() 
	{
        System.out.println(meeting);
    }

	@Test
    public void testsetMeeting() 
    {
        this.meeting = meeting;
    }

    @PlanningVariable(valueRangeProviderRefs = {"timeGrainRange"})
    @Test
    public void testgetStartingTimeGrain() 
    {
        System.out.println(startingTimeGrain);
    }

    @Test
    public void testsetStartingTimeGrain(TimeGrain startingTimeGrain) 
    {
        this.startingTimeGrain = startingTimeGrain;
    }

    @PlanningVariable(valueRangeProviderRefs = {"roomRange"})
    @Test
    public Room testgetRoom() 
    {
        return room;
    }

    @Test
    public void testsetRoom(Room room) 
    {
        this.room = room;
    }

    @Test
    public int testcalculateOverlap(MeetingAssignment other) 
    {
        if (startingTimeGrain == null || other.getStartingTimeGrain() == null) {
            return 0;
        }
        int start = startingTimeGrain.getGrainIndex();
        int end = start + meeting.getDurationInGrains();
        int otherStart = other.startingTimeGrain.getGrainIndex();
        int otherEnd = otherStart + other.meeting.getDurationInGrains();

        if (end < otherStart) {
            return 0;
        } else if (otherEnd < start) {
            return 0;
        }
        return Math.min(end, otherEnd) - Math.max(start, otherStart);
    }

    @Test
    public Integer testgetLastTimeGrainIndex() 
    {
        if (startingTimeGrain == null) 
        {
            return null;
        }
        
        return startingTimeGrain.getGrainIndex() + meeting.getDurationInGrains() - 1;
    }

    @Test
    public String testgetStartingDateTimeString() 
    {
        if (startingTimeGrain == null) 
        {
            return null;
        }
        
        return startingTimeGrain.getDateTimeString();
    }

    @Test
    public int testgetRoomCapacity() 
    {
        if (room == null) 
        {
            return 0;
        }
        
        return room.getCapacity();
    }

    @Test
    public int testgetRequiredCapacity() 
    {
        return meeting.getRequiredCapacity();
    }

    @Test
    public String testgetLabel() 
    {
        int wrapLength = Math.max(8 * meeting.getDurationInGrains(), 16);
        return "<html><center>" + WordUtils.wrap(meeting.getTopic(), wrapLength, "<br/>", false) + "</center></html>";
    }

    @Test
    public String testtoString() 
    {
        return meeting.toString();
    }
}
