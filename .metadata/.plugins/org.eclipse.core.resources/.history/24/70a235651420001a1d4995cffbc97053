package org.optaplanner.examples.conferencescheduling.domain;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Set;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.entity.PlanningPin;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

public class TalkTest 
{
    private String code;
    private String title;
    private TalkType talkType;
    private List<Speaker> speakerList;
    private Set<String> themeTrackTagSet;
    private Set<String> sectorTagSet;
    private Set<String> audienceTypeSet;
    private int audienceLevel;
    private Set<String> contentTagSet;
    private String language;
    private Set<String> requiredTimeslotTagSet;
    private Set<String> preferredTimeslotTagSet;
    private Set<String> prohibitedTimeslotTagSet;
    private Set<String> undesiredTimeslotTagSet;
    private Set<String> requiredRoomTagSet;
    private Set<String> preferredRoomTagSet;
    private Set<String> prohibitedRoomTagSet;
    private Set<String> undesiredRoomTagSet;
    private Set<String> mutuallyExclusiveTalksTagSet;
    private Set<Talk> prerequisiteTalkSet;
    private int favoriteCount;
    private int crowdControlRisk;
    private Timeslot publishedTimeslot;
    private Room publishedRoom;

    @PlanningPin
    private boolean pinnedByUser = false;

    @PlanningVariable(valueRangeProviderRefs = "timeslotRange")
    private Timeslot timeslot;

    @PlanningVariable(valueRangeProviderRefs = "roomRange")
    private Room room;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		Talk ta = new Talk();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		Talk ta = new Talk();
		ta = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		Talk ta = new Talk();
	}

	@After
	public void tearDown() throws Exception 
	{
		Talk ta = new Talk();
		ta = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/
	
	@Test
   public void testhasSpeaker() 
   {
		Speaker speaker = new Speaker();
		System.out.println(speakerList.contains(speaker));
   }

	@Test
   public void testhasAnyUnavailableSpeaker() 
	{
        if (timeslot == null) 
        {
            System.out.println(false);
        }
                
        System.out.println(false);
    }

	@Test
    public void testoverlappingThemeTrackCount() 
	{
        System.out.println((int) themeTrackTagSet.stream().count());
    }

	@Test
    public void testoverlappingSectorCount() 
	{
        System.out.println((int) sectorTagSet.stream().count());
    }

	@Test
    public void testoverlappingAudienceTypeCount() 
	{
        System.out.println((int) audienceTypeSet.stream().count());
    }

	@Test
    public void testoverlappingContentCount() 
	{
        System.out.println((int) contentTagSet.stream().count());
    }

	@Test
    public void testmissingRequiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) requiredTimeslotTagSet.stream().filter(tag -> !timeslot.hasTag(tag)).count());
    }

	@Test
    public void testmissingPreferredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) preferredTimeslotTagSet.stream().filter(tag -> !timeslot.hasTag(tag)).count());
    }

	@Test
    public void testprevailingProhibitedTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) prohibitedTimeslotTagSet.stream().filter(tag -> timeslot.hasTag(tag)).count());
    }

	@Test
    public void testprevailingUndesiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) undesiredTimeslotTagSet.stream().filter(tag -> timeslot.hasTag(tag)).count());
    }

	@Test
    public void testmissingRequiredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) requiredRoomTagSet.stream().filter(tag -> !room.hasTag(tag)).count());
    }

	@Test
    public void testmissingPreferredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) preferredRoomTagSet.stream().filter(tag -> !room.hasTag(tag)).count());
    }

	@Test
    public void testprevailingProhibitedRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) prohibitedRoomTagSet.stream().filter(tag -> room.hasTag(tag)).count());
    }

	@Test
    public void testprevailingUndesiredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) undesiredRoomTagSet.stream().filter(tag -> room.hasTag(tag)).count());
    }

	@Test
    public void testmissingSpeakerRequiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getRequiredTimeslotTagSet().stream())
                .filter(tag -> !timeslot.hasTag(tag)).count());
    }

	@Test
    public void testmissingSpeakerPreferredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getPreferredTimeslotTagSet().stream())
                .filter(tag -> !timeslot.hasTag(tag)).count());
    }

	@Test
    public void testprevailingSpeakerProhibitedTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getProhibitedTimeslotTagSet().stream())
                .filter(tag -> timeslot.hasTag(tag)).count());
    }

	@Test
    public void testprevailingSpeakerUndesiredTimeslotTagCount() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getUndesiredTimeslotTagSet().stream())
                .filter(tag -> timeslot.hasTag(tag)).count());
    }

	@Test
    public void testmissingSpeakerRequiredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getRequiredRoomTagSet().stream())
                .filter(tag -> !room.hasTag(tag)).count());
    }

	@Test
    public void testmissingSpeakerPreferredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getPreferredRoomTagSet().stream())
                .filter(tag -> !room.hasTag(tag)).count());
    }

	@Test
    public void testprevailingSpeakerProhibitedRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
        
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getProhibitedRoomTagSet().stream())
                .filter(tag -> room.hasTag(tag)).count());
    }

	@Test
    public void testprevailingSpeakerUndesiredRoomTagCount() 
	{
        if (room == null) 
        {
            System.out.println(0);
        }
                
        System.out.println((int) speakerList.stream().flatMap(speaker -> speaker.getUndesiredRoomTagSet().stream())
                .filter(tag -> room.hasTag(tag)).count());
    }

	@Test
    public void testhasUnavailableRoom() 
	{
        if (timeslot == null || room == null) 
        {
            System.out.println(false);
        }
        
        System.out.println(room.getUnavailableTimeslotSet().contains(timeslot));
    }

	@Test
    public void testoverlappingMutuallyExclusiveTalksTagCount(Talk other) 
	{
        System.out.println((int) mutuallyExclusiveTalksTagSet.stream().count());
    }

	@Test
    public void testmissingPrerequisiteCount() 
	{
        System.out.println((int) prerequisiteTalkSet.stream()
                .filter(prerequisite -> prerequisite.getTimeslot() == null || timeslot.endsBefore(prerequisite.getTimeslot()))
                .count());
    }

	@Test
    public void testhasMutualSpeaker() 
	{        
        System.out.println(false);
    }

	@Test
    public void testgetDurationInMinutes() 
	{
        System.out.println(timeslot == null ? null : timeslot.getDurationInMinutes());
    }

	@Test
    public void testoverlapsTime() 
	{
        System.out.println(timeslot != null);
    }

	@Test
    public void testoverlappingDurationInMinutes() 
	{
        if (timeslot == null) 
        {
            System.out.println(0);
        }
    }

	@Test
    public void testcombinedDurationInMinutes() 
	{
        if (timeslot == null) 
        {
            System.out.println();
        }
    }

    @Test
    public void testtoString() 
    {
        System.out.println(code);
    }

    @ValueRangeProvider(id = "timeslotRange")
    @Test
    public void testgetTimeslotRange() 
    {
        System.out.println(talkType.getCompatibleTimeslotSet());
    }

    @ValueRangeProvider(id = "roomRange")
    @Test
    public void testgetRoomRange() 
    {
        System.out.println(talkType.getCompatibleRoomSet());
    }

    @Test
    public void testgetCode() 
    {
        System.out.println(code);
    }

    @Test
    public void testsetCode() 
    {
        this.code = code;
    }

    @Test
    public void testgetTitle() 
    {
        System.out.println(title);
    }

    @Test
    public void testsetTitle() 
    {
        this.title = title;
    }

    @Test
    public void testgetTalkType() 
    {
        System.out.println(talkType);
    }

    @Test
    public void testsetTalkType() 
    {
        this.talkType = talkType;
    }

    @Test
    public void testsetLanguage() 
    {
        this.language = language;
    }

    @Test
    public void testgetSpeakerList() 
    {
        System.out.println(speakerList);
    }

    @Test
    public void testgetThemeTrackTagSet() 
    {
        System.out.println(themeTrackTagSet);
    }

    @Test
    public void testsetThemeTrackTagSet() 
    {
        this.themeTrackTagSet = themeTrackTagSet;
    }

    @Test
    public void testgetSectorTagSet() 
    {
        System.out.println(sectorTagSet);
    }

    @Test
    public void testsetSectorTagSet() 
    {
        this.sectorTagSet = sectorTagSet;
    }

    @Test
    public void testgetAudienceTypeSet() 
    {
        System.out.println(audienceTypeSet);
    }

    @Test
    public void testsetAudienceTypeSet() 
    {
        this.audienceTypeSet = audienceTypeSet;
    }

    @Test
    public void testgetAudienceLevel() 
    {
        System.out.println(audienceLevel);
    }

    @Test
    public void testsetAudienceLevel() 
    {
        this.audienceLevel = audienceLevel;
    }

    @Test
    public void testgetContentTagSet() 
    {
        System.out.println(contentTagSet);
    }

    @Test
    public void testsetContentTagSet() 
    {
        this.contentTagSet = contentTagSet;
    }

    @Test
    public void testgetLanguage() 
    {
        System.out.println(language);
    }

    @Test
    public void testsetSpeakerList() 
    {
        this.speakerList = speakerList;
    }

    @Test
    public void testgetRequiredTimeslotTagSet() 
    {
    	System.out.println(requiredTimeslotTagSet);
    }

    @Test
    public void testsetRequiredTimeslotTagSet() 
    {
        this.requiredTimeslotTagSet = requiredTimeslotTagSet;
    }

    @Test
    public void testgetPreferredTimeslotTagSet() 
    {
    	System.out.println(preferredTimeslotTagSet);
    }

    @Test
    public void testsetPreferredTimeslotTagSet() 
    {
        this.preferredTimeslotTagSet = preferredTimeslotTagSet;
    }

    @Test
    public void testgetProhibitedTimeslotTagSet() 
    {
    	System.out.println(prohibitedTimeslotTagSet);
    }

    @Test
    public void testsetProhibitedTimeslotTagSet() 
    {
        this.prohibitedTimeslotTagSet = prohibitedTimeslotTagSet;
    }

    @Test
    public void testgetUndesiredTimeslotTagSet() 
    {
    	System.out.println(undesiredTimeslotTagSet);
    }

    @Test
    public void testsetUndesiredTimeslotTagSet() 
    {
        this.undesiredTimeslotTagSet = undesiredTimeslotTagSet;
    }

    @Test
    public void testgetRequiredRoomTagSet() 
    {
    	System.out.println(requiredRoomTagSet);
    }

    @Test
    public void testsetRequiredRoomTagSet() 
    {
        this.requiredRoomTagSet = requiredRoomTagSet;
    }

    @Test
    public void testgetPreferredRoomTagSet() 
    {
    	System.out.println(preferredRoomTagSet);
    }

    @Test
    public void testsetPreferredRoomTagSet() 
    {
        this.preferredRoomTagSet = preferredRoomTagSet;
    }

    @Test
    public void testgetProhibitedRoomTagSet() 
    {
    	System.out.println(prohibitedRoomTagSet);
    }

    @Test
    public void testsetProhibitedRoomTagSet() 
    {
        this.prohibitedRoomTagSet = prohibitedRoomTagSet;
    }

    @Test
    public void testgetUndesiredRoomTagSet() 
    {
    	System.out.println(undesiredRoomTagSet);
    }

    @Test
    public void testsetUndesiredRoomTagSet() 
    {
        this.undesiredRoomTagSet = undesiredRoomTagSet;
    }

    @Test
    public void testisPinnedByUser() 
    {
    	System.out.println(pinnedByUser);
    }

    @Test
    public void testsetPinnedByUser() 
    {
        this.pinnedByUser = pinnedByUser;
    }

    @Test
    public void testgetTimeslot() 
    {
        return timeslot;
    }

    @Test
    public void testsetTimeslot(Timeslot timeslot) 
    {
        this.timeslot = timeslot;
    }

    @Test
    public Room testgetRoom() 
    {
        return room;
    }

    @Test
    public void testsetRoom(Room room) 
    {
        this.room = room;
    }

    @Test
    public Set<String> testgetMutuallyExclusiveTalksTagSet() 
    {
        return mutuallyExclusiveTalksTagSet;
    }

    @Test
    public void testsetMutuallyExclusiveTalksTagSet(Set<String> mutuallyExclusiveTalksTagSet) 
    {
        this.mutuallyExclusiveTalksTagSet = mutuallyExclusiveTalksTagSet;
    }

    @Test
    public Set<Talk> testgetPrerequisiteTalkSet() 
    {
        return prerequisiteTalkSet;
    }

    @Test
    public void testsetPrerequisiteTalkSet(Set<Talk> prerequisiteTalkSet) 
    {
        this.prerequisiteTalkSet = prerequisiteTalkSet;
    }

    @Test
    public int testgetFavoriteCount() 
    {
        return favoriteCount;
    }

    @Test
    public void testsetFavoriteCount(int favoriteCount) 
    {
        this.favoriteCount = favoriteCount;
    }

    @Test
    public int testgetCrowdControlRisk() 
    {
        return crowdControlRisk;
    }

    @Test
    public void testsetCrowdControlRisk(int crowdControlRisk) 
    {
        this.crowdControlRisk = crowdControlRisk;
    }

    @Test
    public Timeslot testgetPublishedTimeslot() 
    {
        return publishedTimeslot;
    }

    @Test
    public void testsetPublishedTimeslot(Timeslot publishedTimeslot) 
    {
        this.publishedTimeslot = publishedTimeslot;
    }

    @Test
    public Room testgetPublishedRoom() 
    {
        return publishedRoom;
    }

    @Test
    public void testsetPublishedRoom(Room publishedRoom) 
    {
        this.publishedRoom = publishedRoom;
    }

    @Test
    public Talk testwithTalkType(TalkType talkType) 
    {
        this.talkType = talkType;
        return this;
    }

    @Test
    public Talk testwithSpeakerList(List<Speaker> speakerList) 
    {
        this.speakerList = speakerList;
        return this;
    }

    @Test
    public Talk testwithThemeTrackTagSet(Set<String> themeTrackTagSet) 
    {
        this.themeTrackTagSet = themeTrackTagSet;
        return this;
    }

    @Test
    public Talk testwithSectorTagSet(Set<String> sectorTagSet) 
    {
        this.sectorTagSet = sectorTagSet;
        return this;
    }

    @Test
    public Talk testwithAudienceTypeSet(Set<String> audienceTypeSet) 
    {
        this.audienceTypeSet = audienceTypeSet;
        return this;
    }

    @Test
    public Talk testwithAudienceLevel(int audienceLevel) 
    {
        this.audienceLevel = audienceLevel;
        return this;
    }

    @Test
    public Talk testwithContentTagSet(Set<String> contentTagSet) 
    {
        this.contentTagSet = contentTagSet;
        return this;
    }

    @Test
    public Talk testwithLanguage(String language) 
    {
        this.language = language;
        return this;
    }

    @Test
    public Talk testwithRequiredRoomTagSet(Set<String> requiredRoomTagSet) 
    {
        this.requiredRoomTagSet = requiredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithPreferredRoomTagSet(Set<String> preferredRoomTagSet) 
    {
        this.preferredRoomTagSet = preferredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithProhibitedRoomTagSet(Set<String> prohibitedRoomTagSet) 
    {
        this.prohibitedRoomTagSet = prohibitedRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithUndesiredRoomTagSet(Set<String> undesiredRoomTagSet) 
    {
        this.undesiredRoomTagSet = undesiredRoomTagSet;
        return this;
    }

    @Test
    public Talk testwithRequiredTimeslotTagSet(Set<String> requiredTimeslotTagSet) 
    {
        this.requiredTimeslotTagSet = requiredTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithProhibitedTimeslotTagSet(Set<String> prohibitedTimeslotTagSet) 
    {
        this.prohibitedTimeslotTagSet = prohibitedTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithPreferredTimeslotTagSet(Set<String> preferredTimslotTagSet) 
    {
        this.preferredTimeslotTagSet = preferredTimslotTagSet;
        return this;
    }

    @Test
    public Talk testwithUndesiredTimeslotTagSet(Set<String> undesiredTimeslotTagSet) 
    {
        this.undesiredTimeslotTagSet = undesiredTimeslotTagSet;
        return this;
    }

    @Test
    public Talk testwithMutuallyExclusiveTalksTagSet(Set<String> mutuallyExclusiveTalksTagSet) 
    {
        this.mutuallyExclusiveTalksTagSet = mutuallyExclusiveTalksTagSet;
        return this;
    }

    @Test
    public Talk testwithPrerequisiteTalksCodesSet(Set<Talk> prerequisiteTalksCodesSet) 
    {
        this.prerequisiteTalkSet = prerequisiteTalksCodesSet;
        return this;
    }

    @Test
    public Talk testwithTimeslot(Timeslot timeSlot) 
    {
        this.timeslot = timeSlot;
        return this;
    }

    @Test
    public Talk testwithRoom(Room room) 
    {
        this.room = room;
        return this;
    }
}
