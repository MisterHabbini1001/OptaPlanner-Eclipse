package org.optaplanner.examples.tsp.domain;
import static org.junit.Assert.*;

import java.text.NumberFormat;
import java.util.Collections;
import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.drools.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.solution.drools.ProblemFactProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScore;
import org.optaplanner.examples.tsp.domain.location.DistanceType;
import org.optaplanner.examples.tsp.domain.location.Location;
import org.optaplanner.persistence.xstream.api.score.buildin.simplelong.SimpleLongScoreXStreamConverter;

import com.thoughtworks.xstream.annotations.XStreamConverter;

public class TspSolutionTest 
{
    private String name;
    protected DistanceType distanceType;
    protected String distanceUnitOfMeasurement;
    private List<Location> locationList;
    private Domicile domicile;
    private List<Visit> visitList;

    @XStreamConverter(SimpleLongScoreXStreamConverter.class)
    private SimpleLongScore score;
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		TspSolution ts = new TspSolution();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		TspSolution ts = new TspSolution();
		ts = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		TspSolution ts = new TspSolution();
	}

	@After
	public void tearDown() throws Exception 
	{
		TspSolution ts = new TspSolution();
		ts = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/
	
	public void getName() {
        System.out.println(name);
    }

    public void setName() {
        this.name = name;
    }

    public void getDistanceType() {
    	System.out.println(distanceType);
    }

    public void setDistanceType() {
        this.distanceType = distanceType;
    }

    public void getDistanceUnitOfMeasurement() {
    	System.out.println(distanceUnitOfMeasurement);
    }

    public void setDistanceUnitOfMeasurement() {
        this.distanceUnitOfMeasurement = distanceUnitOfMeasurement;
    }

    @ProblemFactCollectionProperty
    public void getLocationList() {
    	System.out.println(locationList);
    }

    public void setLocationList() {
        this.locationList = locationList;
    }

    @ProblemFactProperty
    public void getDomicile() {
    	System.out.println(domicile);
    }

    public void setDomicile() {
        this.domicile = domicile;
    }

    @PlanningEntityCollectionProperty
    @ValueRangeProvider(id = "visitRange")
    public void getVisitList() {
    	System.out.println(visitList);
    }

    public void setVisitList() {
        this.visitList = visitList;
    }

    @PlanningScore
    public SimpleLongScore getScore() {
    	System.out.println(score);
    }

    public void setScore(SimpleLongScore score) {
        this.score = score;
    }

    @ValueRangeProvider(id = "domicileRange")
    public void getDomicileRange() {
    	System.out.println(Collections.singletonList(domicile));
    }

    public void getDistanceString(NumberFormat numberFormat) {
        if (score == null) {
        	System.out.println();
        }
        long distance = - score.getScore();
        if (distanceUnitOfMeasurement == null) {
        	System.out.println(((double) distance) / 1000.0);
        }
        switch (distanceUnitOfMeasurement) {
            case "sec":  
                long hours = distance / 3600000;
                long minutes = distance % 3600000 / 60000;
                long seconds = distance % 60000 / 1000;
                long milliseconds = distance % 1000;
                System.out.println(hours + "h " + minutes + "m " + seconds + "s " + milliseconds + "ms");
            case "km": { 
                long km = distance / 1000;
                long meter = distance % 1000;
                System.out.println(km + "km " + meter + "m");
            }
            case "meter": {
                long km = distance / 1000;
                long meter = distance % 1000;
                System.out.println(km + "km " + meter + "m");
            }
            default:
            	double d = (double) distance / 1000.0;
            	System.out.println(d + " " + distanceUnitOfMeasurement);
        }
    }
}
