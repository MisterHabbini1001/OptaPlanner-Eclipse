package org.optaplanner.examples.nurserostering.domain.contract;
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class MinMaxContractLineTest {
    private boolean minimumEnabled;
    private int minimumValue;
    private int minimumWeight;

    private boolean maximumEnabled;
    private int maximumValue;
    private int maximumWeight;
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	/*
	@Test
	public void test() {
		fail("Not yet implemented");
	}
	*/

	@Test
    public boolean isMinimumEnabled() {
        return minimumEnabled;
    }

	@Test
    public void setMinimumEnabled(boolean minimumEnabled) {
        this.minimumEnabled = minimumEnabled;
    }

	@Test
    public int getMinimumValue() {
        return minimumValue;
    }

	@Test
    public void setMinimumValue(int minimumValue) {
        this.minimumValue = minimumValue;
    }

	@Test
    public int getMinimumWeight() {
        return minimumWeight;
    }

	@Test
    public void setMinimumWeight(int minimumWeight) {
        this.minimumWeight = minimumWeight;
    }

	@Test
    public boolean isMaximumEnabled() {
        return maximumEnabled;
    }

	@Test
    public void setMaximumEnabled(boolean maximumEnabled) {
        this.maximumEnabled = maximumEnabled;
    }

	@Test
    public int getMaximumValue() {
        return maximumValue;
    }

	@Test
    public void setMaximumValue(int maximumValue) {
        this.maximumValue = maximumValue;
    }

	@Test
    public int getMaximumWeight() {
        return maximumWeight;
    }

	@Test
    public void setMaximumWeight(int maximumWeight) {
        this.maximumWeight = maximumWeight;
    }

	@Test
    public boolean isEnabled() {
        return minimumEnabled || maximumEnabled;
    }
}
