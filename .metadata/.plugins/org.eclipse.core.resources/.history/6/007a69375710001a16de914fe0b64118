/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.taskassigning.domain;

import com.thoughtworks.xstream.annotations.XStreamAlias;

import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.entity.PlanningPin;
import org.optaplanner.core.api.domain.variable.AnchorShadowVariable;
import org.optaplanner.core.api.domain.variable.CustomShadowVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariableGraphType;
import org.optaplanner.core.api.domain.variable.PlanningVariableReference;
import org.optaplanner.examples.common.swingui.components.Labeled;
import org.optaplanner.examples.taskassigning.domain.solver.StartTimeUpdatingVariableListener;
import org.optaplanner.examples.taskassigning.domain.solver.TaskDifficultyComparator;

@PlanningEntity(difficultyComparatorClass = TaskDifficultyComparator.class)
@XStreamAlias("TaTask")
public class Task extends TaskOrEmployee implements Labeled {

    private TaskType taskType;
    private int indexInTaskType;
    private String code;
    private String title;
    private int duration; //in minutes
    private int responsTime; //in minutes
    private double latitude;
    private double longitude;
    private Customer customer;
    private int readyTime;
    private Priority priority;
    @PlanningPin
    private boolean pinned;

    // Planning variables: changes during planning, between score calculations.
    @PlanningVariable(valueRangeProviderRefs = {"employeeRange", "taskRange"},
            graphType = PlanningVariableGraphType.CHAINED)
    private TaskOrEmployee previousTaskOrEmployee;

    // Shadow variables
    // Task nextTask inherited from superclass
    @AnchorShadowVariable(sourceVariableName = "previousTaskOrEmployee")
    private Employee employee;
    @CustomShadowVariable(variableListenerClass = StartTimeUpdatingVariableListener.class,
            // Arguable, to adhere to API specs (although this works), nextTask and employee should also be a source,
            // because this shadow must be triggered after nextTask and employee (but there is no need to be triggered by those)
            sources = {@PlanningVariableReference(variableName = "previousTaskOrEmployee")})
    private Integer startTime; // In minutes

    public Task() {
    }

    public Task(
    		long id,
    		TaskType taskType,
    		int indexInTaskType,
    		String code,
    		String title,
    		int duration,
    		int responsTime,
    		double latitude,
    		double longitude,
    		Customer customer,
    		int readyTime,
    		Priority priority) 
    {
        super(id);
        this.taskType = taskType;
        this.indexInTaskType = indexInTaskType;
        this.code = code;
        this.title = title;
        this.duration = duration;
        this.responsTime = responsTime; 
        this.latitude = latitude;
        this.longitude = longitude;
        this.customer = customer;
        //this.readyTime = readyTime;
        this.readyTime = 100;//tijdelijk
        this.priority = priority;
        pinned = false;
    }

    public TaskType getTaskType() {
        return taskType;
    }

    public void setTaskType(TaskType taskType) {
        this.taskType = taskType;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }
    
    public void setDuration(int duration) {
        this.duration = duration;
    }
    
    public int getResponsTime() {
    	return responsTime;
    }
    
    public void setResponsTime(int responsTime) {
    	this.responsTime = responsTime;
    } 
    
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }
    
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }
    
    public int getIndexInTaskType() {
        return indexInTaskType;
    }

    public void setIndexInTaskType(int indexInTaskType) {
        this.indexInTaskType = indexInTaskType;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public int getReadyTime() {
        return readyTime;
    }

    public void setReadyTime(int readyTime) {
        this.readyTime = readyTime;
    }

    public Priority getPriority() {
        return priority;
    }

    public void setPriority(Priority priority) {
        this.priority = priority;
    }

    public boolean isPinned() {
        return pinned;
    }

    public void setPinned(boolean pinned) {
        this.pinned = pinned;
    }

    public TaskOrEmployee getPreviousTaskOrEmployee() {
        return previousTaskOrEmployee;
    }

    public void setPreviousTaskOrEmployee(TaskOrEmployee previousTaskOrEmployee) {
        this.previousTaskOrEmployee = previousTaskOrEmployee;
    }

    @Override
    public Employee getEmployee() {
        return employee;
    }

    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    public Integer getStartTime() {
        return startTime;
    }

    public void setStartTime(Integer startTime) {
        this.startTime = startTime;
    }

    // ************************************************************************
    // Complex methods
    // ************************************************************************

    public int getMissingSkillCount() {
        if (employee == null) {
            return 0;
        }
        int count = 0;
        for (Skill skill : taskType.getRequiredSkillList()) {
            if (!employee.getSkillSet().contains(skill)) {
                count++;
            }
        }
        return count;
    }

    /**
     * In minutes
     * @return at least 1 minute
     */
    public int getDuration() {
    	if (duration == 0) {
    		Affinity affinity = getAffinity();
    		return taskType.getBaseDuration() * affinity.getDurationMultiplier() + getTravelDuration();
    	}
    	return duration + getTravelDuration();
    }

    public Affinity getAffinity() {
        return (employee == null) ? Affinity.NONE : employee.getAffinity(customer);
    }
    
    @Override
    public double getLatitude() {
        return latitude;
    }
    
    @Override
    public double getLongitude() {
        return longitude;
    } 

    @Override
    public Integer getEndTime() {
        if (startTime == null) {
            return null;
        }
        return startTime + getDuration();
    }

    @Override
    public String getLabel() {
        return getCode() + ": " + getTitle();
    }

    public String getToolText() {
        StringBuilder toolText = new StringBuilder();
        toolText.append("<html><center><b>").append(getLabel()).append("</b><br/><br/>");
                //.append(priority.getLabel()).append("<br/><br/>");
        int hours = getResponsTime() / 60;
        int minutes = getResponsTime() - hours * 60;
        toolText.append("Response Time: " + hours + ":" + minutes + "<br/>");
        //toolText.append("Response Time: " + getResponsTime() + "<br/>");
        toolText.append("Travel Duration: " + getTravelDuration() + "<br/>");
        toolText.append("Required skills:<br/>");
        for (Skill skill : taskType.getRequiredSkillList()) {
            toolText.append(skill.getLabel()).append("<br/>");
        }
        toolText.append("<br/>Customer:<br/>").append(customer.getName()).append("<br/>(")
                .append(getAffinity().getLabel()).append(")<br/>");
        toolText.append("</center></html>");
        return toolText.toString();
    }

    @Override
    public String toString() {
        return getCode();
    }
    
    //habbo+
    //Determine travel time between work location and home
    public Integer getTravelHomeDuration() {
    	if (latitude == 0 && longitude == 0) {
    		return 0;
    	}
    	Employee employee = getEmployee();
    	if (employee == null) {
    		return 0;
    	}
    	int timeToTravelHome = getAirTimeTo(latitude, longitude, employee.getLatitude(), employee.getLongitude());
    	return Math.min(timeToTravelHome, 90);
    }
    
    public Integer getTravelDuration() {
    	//skip when no value for current position
    	if (latitude == 0 && longitude == 0) {
    		return 0;
    	}
    	//get previous position
        TaskOrEmployee previous = this.getPreviousTaskOrEmployee();
        if (previous == null) {
        	return 0;
        }
        double latitudeFrom = previous.getLatitude();
        double longitudeFrom = previous.getLongitude();
        int previousEndTime = previous.getEndTime();
        //if this start is more than 6 hours from previous end, then employee leaves from home
        if (startTime != null && previousEndTime != 0) {
	        if ((startTime - previousEndTime > 360))  {
	        	Employee employee = getEmployee();
	        	latitudeFrom = employee.getLatitude();
	        	longitudeFrom = employee.getLongitude();
	        }
        }
        //skip when no previous position
        if (latitudeFrom == 0 && longitudeFrom == 0) {
        	return 0;
        }
        int travelDuration = getAirTimeTo(latitudeFrom, longitudeFrom, latitude, longitude);
        return Math.min(travelDuration, 120);
    }
    //habbo-

    
    //habbo+
    public int getAirTimeTo(
    		double latitudeFrom,
    		double longitudeFrom,
    		double latitudeTo,
    		double longitudeTo
    	)
    	{
        // Calculation are based upon Haversine formula
    	// The math module contains a function named toRadians which converts from degrees to radians
        
        double lon1 = Math.toRadians(longitudeFrom); 
        double lon2 = Math.toRadians(longitudeTo); 
        double lat1 = Math.toRadians(latitudeFrom); 
        double lat2 = Math.toRadians(latitudeTo); 
        
        // Haversine formula  
        double dlon = lon2 - lon1;  
        double dlat = lat2 - lat1; 
        double a = Math.pow(Math.sin(dlat / 2), 2) 
                 + Math.cos(lat1) * Math.cos(lat2) 
                 * Math.pow(Math.sin(dlon / 2),2); 
              
        double c = 2 * Math.asin(Math.sqrt(a)); 
  
        // Radius of earth in kilometers. Use 3956  
        // for miles 
        double r = 6371; 
  
        // calculate the result
        
        //average speed over air is 68 kilometer per hour
        //return the time in minutes
        double speed = 68;
        return((int)Math.round(c * r * 60 / speed));
    }
    //habbo-
       

}
