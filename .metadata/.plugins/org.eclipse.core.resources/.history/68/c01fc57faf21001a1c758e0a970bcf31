package org.optaplanner.examples.meetingscheduling.domain;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.constraintweight.ConstraintWeight;
import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScore;

public class MeetingConstraintConfigurationTest 
{
    public static final String ROOM_CONFLICT = "Room conflict";
    public static final String DONT_GO_IN_OVERTIME = "Don't go in overtime";
    public static final String REQUIRED_ATTENDANCE_CONFLICT = "Required attendance conflict";
    public static final String REQUIRED_ROOM_CAPACITY = "Required room capacity";
    public static final String START_AND_END_ON_SAME_DAY = "Start and end on same day";

    public static final String REQUIRED_AND_PREFERRED_ATTENDANCE_CONFLICT = "Required and preferred attendance conflict";
    public static final String PREFERRED_ATTENDANCE_CONFLICT = "Preferred attendance conflict";

    public static final String DO_ALL_MEETINGS_AS_SOON_AS_POSSIBLE = "Do all meetings as soon as possible";
    public static final String ONE_TIME_GRAIN_BREAK_BETWEEN_TWO_CONSECUTIVE_MEETINGS = "One TimeGrain break between two consecutive meetings";
    public static final String OVERLAPPING_MEETINGS = "Overlapping meetings";
    public static final String ASSIGN_LARGER_ROOMS_FIRST = "Assign larger rooms first";
    public static final String ROOM_STABILITY = "Room stability";

    @ConstraintWeight(ROOM_CONFLICT)
    private HardMediumSoftScore roomConflict = HardMediumSoftScore.ofHard(1);
    @ConstraintWeight(DONT_GO_IN_OVERTIME)
    private HardMediumSoftScore dontGoInOvertime = HardMediumSoftScore.ofHard(1);
    @ConstraintWeight(REQUIRED_ATTENDANCE_CONFLICT)
    private HardMediumSoftScore requiredAttendanceConflict = HardMediumSoftScore.ofHard(1);
    @ConstraintWeight(REQUIRED_ROOM_CAPACITY)
    private HardMediumSoftScore requiredRoomCapacity = HardMediumSoftScore.ofHard(1);
    @ConstraintWeight(START_AND_END_ON_SAME_DAY)
    private HardMediumSoftScore startAndEndOnSameDay = HardMediumSoftScore.ofHard(1);

    @ConstraintWeight(REQUIRED_AND_PREFERRED_ATTENDANCE_CONFLICT)
    private HardMediumSoftScore requiredAndPreferredAttendanceConflict = HardMediumSoftScore.ofMedium(1);
    @ConstraintWeight(PREFERRED_ATTENDANCE_CONFLICT)
    private HardMediumSoftScore preferredAttendanceConflict = HardMediumSoftScore.ofMedium(1);

    @ConstraintWeight(DO_ALL_MEETINGS_AS_SOON_AS_POSSIBLE)
    private HardMediumSoftScore doAllMeetingsAsSoonAsPossible = HardMediumSoftScore.ofSoft(1);
    @ConstraintWeight(ONE_TIME_GRAIN_BREAK_BETWEEN_TWO_CONSECUTIVE_MEETINGS)
    private HardMediumSoftScore oneTimeGrainBreakBetweenTwoConsecutiveMeetings = HardMediumSoftScore.ofSoft(100);
    @ConstraintWeight(OVERLAPPING_MEETINGS)
    private HardMediumSoftScore overlappingMeetings = HardMediumSoftScore.ofSoft(10);
    @ConstraintWeight(ASSIGN_LARGER_ROOMS_FIRST)
    private HardMediumSoftScore assignLargerRoomsFirst = HardMediumSoftScore.ofSoft(1);
    @ConstraintWeight(ROOM_STABILITY)
    private HardMediumSoftScore roomStability = HardMediumSoftScore.ofSoft(1);
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		MeetingConstraintConfigurationTest mcct = new MeetingConstraintConfigurationTest();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		MeetingConstraintConfigurationTest mcct = new MeetingConstraintConfigurationTest();
		mcct = null;
	}

	@Before
	public void setUp() throws Exception 
	{
		MeetingConstraintConfigurationTest mcct = new MeetingConstraintConfigurationTest();
	}

	@After
	public void tearDown() throws Exception 
	{
		MeetingConstraintConfigurationTest mcct = new MeetingConstraintConfigurationTest();
		mcct = null;
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	@Test
	public HardMediumSoftScore testgetRoomConflict() 
	{
        return roomConflict;
    }

	@Test
    public void testsetRoomConflict(HardMediumSoftScore roomConflict) 
    {
        this.roomConflict = roomConflict;
    }

	@Test
    public HardMediumSoftScore testgetDontGoInOvertime() 
    {
        return dontGoInOvertime;
    }

	@Test
    public void testsetDontGoInOvertime(HardMediumSoftScore dontGoInOvertime) 
    {
        this.dontGoInOvertime = dontGoInOvertime;
    }

	@Test
    public HardMediumSoftScore testgetRequiredAttendanceConflict() 
    {
        return requiredAttendanceConflict;
    }

	@Test
    public void testsetRequiredAttendanceConflict(HardMediumSoftScore requiredAttendanceConflict) 
    {
        this.requiredAttendanceConflict = requiredAttendanceConflict;
    }

	@Test
    public HardMediumSoftScore testgetRequiredRoomCapacity() 
    {
        return requiredRoomCapacity;
    }

	@Test
    public void testsetRequiredRoomCapacity(HardMediumSoftScore requiredRoomCapacity) 
    {
        this.requiredRoomCapacity = requiredRoomCapacity;
    }

	@Test
    public HardMediumSoftScore testgetStartAndEndOnSameDay() 
    {
        return startAndEndOnSameDay;
    }

	@Test
    public void testsetStartAndEndOnSameDay(HardMediumSoftScore startAndEndOnSameDay) 
    {
        this.startAndEndOnSameDay = startAndEndOnSameDay;
    }

	@Test
    public HardMediumSoftScore testgetRequiredAndPreferredAttendanceConflict() 
    {
        return requiredAndPreferredAttendanceConflict;
    }

	@Test
    public void testsetRequiredAndPreferredAttendanceConflict(HardMediumSoftScore requiredAndPreferredAttendanceConflict) 
    {
        this.requiredAndPreferredAttendanceConflict = requiredAndPreferredAttendanceConflict;
    }

	@Test
    public HardMediumSoftScore testgetPreferredAttendanceConflict() 
	{
        return preferredAttendanceConflict;
    }

	@Test
    public void testsetPreferredAttendanceConflict(HardMediumSoftScore preferredAttendanceConflict) 
	{
        this.preferredAttendanceConflict = preferredAttendanceConflict;
    }

	@Test
    public HardMediumSoftScore testgetDoAllMeetingsAsSoonAsPossible() 
	{
        return doAllMeetingsAsSoonAsPossible;
    }

	@Test
    public void testsetDoAllMeetingsAsSoonAsPossible(HardMediumSoftScore doAllMeetingsAsSoonAsPossible) 
	{
        this.doAllMeetingsAsSoonAsPossible = doAllMeetingsAsSoonAsPossible;
    }

	@Test
    public HardMediumSoftScore testgetOneTimeGrainBreakBetweenTwoConsecutiveMeetings() 
	{
        return oneTimeGrainBreakBetweenTwoConsecutiveMeetings;
    }

	@Test
    public void testsetOneTimeGrainBreakBetweenTwoConsecutiveMeetings(HardMediumSoftScore oneTimeGrainBreakBetweenTwoConsecutiveMeetings) 
    {
        this.oneTimeGrainBreakBetweenTwoConsecutiveMeetings = oneTimeGrainBreakBetweenTwoConsecutiveMeetings;
    }

	@Test
    public HardMediumSoftScore testgetOverlappingMeetings() 
	{
        return overlappingMeetings;
    }

	@Test
    public void testsetOverlappingMeetings(HardMediumSoftScore overlappingMeetings) 
	{
        this.overlappingMeetings = overlappingMeetings;
    }

	@Test
    public HardMediumSoftScore testgetAssignLargerRoomsFirst() 
	{
        return assignLargerRoomsFirst;
    }

	@Test
    public void testsetAssignLargerRoomsFirst(HardMediumSoftScore assignLargerRoomsFirst) 
	{
        this.assignLargerRoomsFirst = assignLargerRoomsFirst;
    }

	@Test
    public HardMediumSoftScore testgetRoomStability() 
    {
        return roomStability;
    }

	@Test
    public void testsetRoomStability(HardMediumSoftScore roomStability) 
	{
        this.roomStability = roomStability;
    }
}
