package org.optaplanner.examples.scrabble.domain;
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.variable.PlanningVariable;

public class ScrabbleWordAssignmentTest {
    private ScrabbleSolution solution;
    private String word;

    @PlanningVariable(valueRangeProviderRefs = {"startCellRange"})
    private ScrabbleCell startCell;
    @PlanningVariable(valueRangeProviderRefs = {"directionRange"})
    private ScrabbleWordDirection direction;
    
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/

	public void getSolution() {
        System.out.println(solution);
    }

    public void setSolution() {
        this.solution = solution;
    }

    public void getWord() {
    	System.out.println(word);
    }

    public void setWord() {
        this.word = word;
    }

    public void getStartCell() {
    	System.out.println(startCell);
    }

    public void setStartCell(ScrabbleCell startCell) {
        this.startCell = startCell;
    }

    public ScrabbleWordDirection getDirection() {
        return direction;
    }

    public void setDirection(ScrabbleWordDirection direction) {
        this.direction = direction;
    }

    // ************************************************************************
    // Complex methods
    // ************************************************************************

    public String getLabel() {
        return word;
    }

    public boolean isOutOfGrid() {
        if (direction == null || startCell == null) {
            return false;
        }
        switch (direction) {
            case HORIZONTAL:
                return startCell.getX() + word.length() > solution.getGridWidth();
            case VERTICAL:
                return startCell.getY() + word.length() > solution.getGridHeight();
            default:
                throw new IllegalStateException("The direction (" + direction + ") is not implemented.");
        }
    }

    public int getDistanceToCenter() {
        if (direction == null || startCell == null) {
            return 0;
        }
        int centerX = solution.getGridWidth() / 2;
        int centerY = solution.getGridHeight() / 2;
        int x;
        int y;
        switch (direction) {
            case HORIZONTAL:
                x = startCell.getX() + word.length() / 2;
                y = startCell.getY();
                break;
            case VERTICAL:
                x = startCell.getX();
                y = startCell.getY() + word.length() / 2;
                break;
            default:
                throw new IllegalStateException("The direction (" + direction + ") is not implemented.");
        }
        return Math.abs(centerX - x) + Math.abs(centerY - y);
    }

    @Override
    public String toString() {
        return word;
    }
}
