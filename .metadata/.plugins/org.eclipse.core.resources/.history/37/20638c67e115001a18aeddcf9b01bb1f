package org.optaplanner.examples.taskassigning.domain;
import static org.junit.Assert.*;
import org.junit.*;
import org.optaplanner.core.api.domain.entity.PlanningPin;
import org.optaplanner.core.api.domain.variable.AnchorShadowVariable;
import org.optaplanner.core.api.domain.variable.CustomShadowVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariableGraphType;
import org.optaplanner.core.api.domain.variable.PlanningVariableReference;
import org.optaplanner.examples.taskassigning.domain.solver.StartTimeUpdatingVariableListener;  

public class TaskTest 
{
    private TaskType taskType;
    private int indexInTaskType;
    private String code;
    private String title;
    private int duration; //in minutes
    private int responsTime; //in minutes
    private double latitude;
    private double longitude;
    private Customer customer;
    private int readyTime;
    private Priority priority;
    @PlanningPin
    private boolean pinned;

    // Planning variables: changes during planning, between score calculations.
    @PlanningVariable(valueRangeProviderRefs = {"employeeRange", "taskRange"},
            graphType = PlanningVariableGraphType.CHAINED)
    private TaskOrEmployee previousTaskOrEmployee;

    // Shadow variables
    // Task nextTask inherited from superclass
    @AnchorShadowVariable(sourceVariableName = "previousTaskOrEmployee")
    private Employee employee;
    @CustomShadowVariable(variableListenerClass = StartTimeUpdatingVariableListener.class,
            // Arguable, to adhere to API specs (although this works), nextTask and employee should also be a source,
            // because this shadow must be triggered after nextTask and employee (but there is no need to be triggered by those)
            sources = {@PlanningVariableReference(variableName = "previousTaskOrEmployee")})
    private Integer startTime; // In minutes
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		//assertEquals(2, 2); // For now. Remove later
		Task ta = new Task();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception
	{
		//assertEquals(2, 2); // For now. Remove later
		Task ta = new Task();
		ta = null;
	}

	@Before
	public void setUp() throws Exception
	{
		//assertEquals(2, 2); // For now. Remove later
		Task ta = new Task();
	}

	@After
	public void tearDown() throws Exception 
	{
		//assertEquals(2, 2); // For now. Remove later
		Task ta = new Task();
		ta = null;
	}
	
	@Test
	public TaskType testgetTaskType()
	{
		//assertEquals(2, 2); // For now. Remove later
		return taskType;
	}
	
	@Test
	public void testsetTaskType(TaskType taskType) 
	{
		//assertEquals(2, 2); // For now. Remove later
		this.taskType = taskType;
	}
	
	@Test
	public String testgetCode()
	{
		//assertEquals(2, 2); // For now. Remove later
		return code;
	}
	
	@Test
	public void testsetCode(String code)
	{
		//assertEquals(2, 2); // For now. Remove later
		this.code = code;
	}
	
	@Test
	public String testgetTitle()
	{
		//assertEquals(2, 2); // For now. Remove later
		return title;
	}
	
	@Test
	public void testsetTitle()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetDuration()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetResponsTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetResponsTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetLatitude()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetLongitude()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetIndexInTaskType()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetIndexInTaskType()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetCustomer()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetCustomer()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetReadyTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetReadyTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetPriority()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetPriority()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testisPinned()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetPinned()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetPreviousTaskOrEmployee()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetPreviousTaskOrEmployee()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetEmployee()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetEmployee()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetStartTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testsetStartTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetMissingSkillCount()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetDuration()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetAffinity()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetLatitude()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetLongitude()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetEndTime()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetLabel()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetToolText()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testtoString()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetTravelHomeDuration()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
	
	@Test
	public void testgetAirTimeTo()
	{
		//assertEquals(2, 2); // For now. Remove later
	}
}
