package org.optaplanner.examples.examination.domain;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.constraintweight.ConstraintConfigurationProvider;
import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.drools.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.examples.examination.domain.solver.TopicConflict;
import org.optaplanner.persistence.xstream.api.score.buildin.hardsoft.HardSoftScoreXStreamConverter;
import com.thoughtworks.xstream.annotations.XStreamConverter;

public class ExaminationTest 
{
    private ExaminationConstraintConfiguration constraintConfiguration;
    private List<Student> studentList;
    private List<Topic> topicList;
    private List<Period> periodList;
    private List<Room> roomList;
    private List<PeriodPenalty> periodPenaltyList;
    private List<RoomPenalty> roomPenaltyList;
    private List<Exam> examList;

    @XStreamConverter(HardSoftScoreXStreamConverter.class)
    private HardSoftScore score;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		
	}

	@Before
	public void setUp() throws Exception 
	{
		
	}

	@After
	public void tearDown() throws Exception 
	{
		
	}

	/*
	@Test
	public void test() 
	{
		fail("Not yet implemented");
	}
	*/
	
    @ConstraintConfigurationProvider
    @Test
    public ExaminationConstraintConfiguration getConstraintConfiguration() 
    {
        return constraintConfiguration;
    }

    @Test
    public void setConstraintConfiguration(ExaminationConstraintConfiguration constraintConfiguration) 
    {
        this.constraintConfiguration = constraintConfiguration;
    }

    @Test
    public List<Student> getStudentList() 
    {
        return studentList;
    }

    @Test
    public void setStudentList(List<Student> studentList) 
    {
        this.studentList = studentList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<Topic> getTopicList() 
    {
        return topicList;
    }

    @Test
    public void setTopicList(List<Topic> topicList) 
    {
        this.topicList = topicList;
    }

    @ValueRangeProvider(id = "periodRange")
    @ProblemFactCollectionProperty
    @Test
    public List<Period> getPeriodList() 
    {
        return periodList;
    }

    @Test
    public void setPeriodList(List<Period> periodList) 
    {
        this.periodList = periodList;
    }

    @ValueRangeProvider(id = "roomRange")
    @ProblemFactCollectionProperty
    @Test
    public List<Room> getRoomList() 
    {
        return roomList;
    }

    @Test
    public void setRoomList(List<Room> roomList) 
    {
        this.roomList = roomList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<PeriodPenalty> getPeriodPenaltyList() 
    {
        return periodPenaltyList;
    }

    @Test
    public void setPeriodPenaltyList(List<PeriodPenalty> periodPenaltyList) 
    {
        this.periodPenaltyList = periodPenaltyList;
    }

    @ProblemFactCollectionProperty
    @Test
    public List<RoomPenalty> getRoomPenaltyList() 
    {
        return roomPenaltyList;
    }

    @Test
    public void setRoomPenaltyList(List<RoomPenalty> roomPenaltyList) 
    {
        this.roomPenaltyList = roomPenaltyList;
    }

    @PlanningEntityCollectionProperty
    @Test
    public List<Exam> getExamList() 
    {
        return examList;
    }

    @Test
    public void setExamList(List<Exam> examList) 
    {
        this.examList = examList;
    }

    @PlanningScore
    @Test
    public HardSoftScore getScore() 
    {
        return score;
    }

    @Test
    public void setScore(HardSoftScore score) 
    {
        this.score = score;
    }

    // ************************************************************************
    // Complex methods
    // ************************************************************************

    @ProblemFactCollectionProperty
    @Test
    private List<TopicConflict> calculateTopicConflictList() 
    {
        List<TopicConflict> topicConflictList = new ArrayList<>();
        for (Topic leftTopic : topicList) 
        {
            for (Topic rightTopic : topicList) 
            {
                if (leftTopic.getId() < rightTopic.getId()) 
                {
                    int studentSize = 0;
                    for (Student student : leftTopic.getStudentList()) 
                    {
                        if (rightTopic.getStudentList().contains(student)) 
                        {
                            studentSize++;
                        }
                    }
                    
                    if (studentSize > 0) 
                    {
                        topicConflictList.add(new TopicConflict(leftTopic, rightTopic, studentSize));
                    }
                }
            }
        }
        
        return topicConflictList;
    }
}
