package org.optaplanner.examples.projectjobscheduling.domain;
import static org.junit.Assert.*;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.optaplanner.core.api.domain.valuerange.CountableValueRange;
import org.optaplanner.core.api.domain.valuerange.ValueRangeFactory;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.domain.variable.CustomShadowVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
import org.optaplanner.core.api.domain.variable.PlanningVariableReference;
import org.optaplanner.examples.projectjobscheduling.domain.solver.DelayStrengthComparator;
import org.optaplanner.examples.projectjobscheduling.domain.solver.ExecutionModeStrengthWeightFactory;
import org.optaplanner.examples.projectjobscheduling.domain.solver.PredecessorsDoneDateUpdatingVariableListener;

public class AllocationTest 
{
    private Job job;
    private Allocation sourceAllocation;
    private Allocation sinkAllocation;
    private List<Allocation> predecessorAllocationList;
    private List<Allocation> successorAllocationList;
    private ExecutionMode executionMode;
    private Integer delay; // In days
    private Integer predecessorsDoneDate;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		
	}

	@Before
	public void setUp() throws Exception 
	{
		
	}

	@After
	public void tearDown() throws Exception 
	{
		
	}

	/*
	@Test
	public void test() {
		fail("Not yet implemented");
	}
    */
	
	@Test
    public Job getJob() 
    {
        return job;
    }

	@Test
    public void setJob(Job job) 
    {
        this.job = job;
    }

	@Test
    public Allocation getSourceAllocation() 
    {
        return sourceAllocation;
    }

	@Test
    public void setSourceAllocation(Allocation sourceAllocation) 
    {
        this.sourceAllocation = sourceAllocation;
    }

	@Test
    public Allocation getSinkAllocation() 
    {
        return sinkAllocation;
    }

	@Test
    public void setSinkAllocation(Allocation sinkAllocation) 
    {
        this.sinkAllocation = sinkAllocation;
    }

	@Test
    public List<Allocation> getPredecessorAllocationList() 
    {
        return predecessorAllocationList;
    }

	@Test
    public void setPredecessorAllocationList(List<Allocation> predecessorAllocationList) 
    {
        this.predecessorAllocationList = predecessorAllocationList;
    }

	@Test
    public List<Allocation> getSuccessorAllocationList() 
    {
        return successorAllocationList;
    }

	@Test
    public void setSuccessorAllocationList(List<Allocation> successorAllocationList) 
    {
        this.successorAllocationList = successorAllocationList;
    }

	@Test
    @PlanningVariable(valueRangeProviderRefs = {"executionModeRange"},
            strengthWeightFactoryClass = ExecutionModeStrengthWeightFactory.class)
    public ExecutionMode getExecutionMode() 
    {
        return executionMode;
    }

	@Test
    public void setExecutionMode(ExecutionMode executionMode) 
    {
        this.executionMode = executionMode;
    }

	@Test
    @PlanningVariable(valueRangeProviderRefs = {"delayRange"},
            strengthComparatorClass = DelayStrengthComparator.class)
    public Integer getDelay() 
    {
        return delay;
    }

	@Test
    public void setDelay(Integer delay) 
    {
        this.delay = delay;
    }

	@Test
    @CustomShadowVariable(variableListenerClass = PredecessorsDoneDateUpdatingVariableListener.class,
            sources = {@PlanningVariableReference(variableName = "executionMode"),
                    @PlanningVariableReference(variableName = "delay")})
    public Integer getPredecessorsDoneDate() 
    {
        return predecessorsDoneDate;
    }

	@Test
    public void setPredecessorsDoneDate(Integer predecessorsDoneDate) 
    {
        this.predecessorsDoneDate = predecessorsDoneDate;
    }

	@Test
    public Integer getStartDate() 
    {
        if (predecessorsDoneDate == null) 
        {
            return null;
        }
        
        return predecessorsDoneDate + (delay == null ? 0 : delay);
    }

	@Test
    public Integer getEndDate() 
    {
        if (predecessorsDoneDate == null) 
        {
            return null;
        }
        
        return predecessorsDoneDate + (delay == null ? 0 : delay)
                + (executionMode == null ? 0 : executionMode.getDuration());
    }

	@Test
    public Project getProject() 
    {
        return job.getProject();
    }

	@Test
    public int getProjectCriticalPathEndDate() 
    {
        return job.getProject().getCriticalPathEndDate();
    }

	@Test
    public JobType getJobType() 
    {
        return job.getJobType();
    }

	@Test
    public String getLabel() 
    {
        return "Job " + job.getId();
    }

	@Test
    @ValueRangeProvider(id = "executionModeRange")
    public List<ExecutionMode> getExecutionModeRange() 
    {
        return job.getExecutionModeList();
    }

	@Test
    @ValueRangeProvider(id = "delayRange")
    public CountableValueRange<Integer> getDelayRange() 
    {
        return ValueRangeFactory.createIntValueRange(0, 500);
    }
}
